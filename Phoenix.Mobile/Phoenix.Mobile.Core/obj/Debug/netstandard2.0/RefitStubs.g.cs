// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using Phoenix.Mobile.Core.RefitInternalGenerated;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace Phoenix.Mobile.Core.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

#pragma warning disable CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning disable CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
namespace Phoenix.Mobile.Core.Proxies
{
    using global::Refit;
    using global::System;
    using global::System.Threading.Tasks;
    using global::Phoenix.Mobile.Core.Models.Auth;
    using global::Phoenix.Mobile.Core.Services;
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Framework.Core;
    using global::Phoenix.Shared.Auth;
    using global::Phoenix.Framework.Extensions;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedAuthProxyIAuthApi : AuthProxy.IAuthApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedAuthProxyIAuthApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<TokenResponse> AuthProxy.IAuthApi.FarmerLogin(TokenRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("FarmerLogin", new Type[] { typeof(TokenRequest) });
            return (Task<TokenResponse>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<TokenResponse> AuthProxy.IAuthApi.ExternalLogin(ExternalTokenRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("ExternalLogin", new Type[] { typeof(ExternalTokenRequest) });
            return (Task<TokenResponse>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies.Common
{
    using global::Phoenix.Framework.Core;
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Shared.Common;
    using global::Phoenix.Shared.CartItem;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Phoenix.Shared.Core;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedCartItemProxyICartItemApi : CartItemProxy.ICartItemApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedCartItemProxyICartItemApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<BaseResponse<CartListDto>> CartItemProxy.ICartItemApi.GetAllCartItems(CartListRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllCartItems", new Type[] { typeof(CartListRequest) });
            return (Task<BaseResponse<CartListDto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CartItemDto> CartItemProxy.ICartItemApi.AddItemToCArt(CartItemRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("AddItemToCArt", new Type[] { typeof(CartItemRequest) });
            return (Task<CartItemDto>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CrudResult> CartItemProxy.ICartItemApi.RemoveItemFromCart(int Id)
        {
            var arguments = new object[] { Id };
            var func = requestBuilder.BuildRestResultFuncForMethod("RemoveItemFromCart", new Type[] { typeof(int) });
            return (Task<CrudResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CrudResult> CartItemProxy.ICartItemApi.UpdateCart(int Id, CartItemRequest request)
        {
            var arguments = new object[] { Id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateCart", new Type[] { typeof(int), typeof(CartItemRequest) });
            return (Task<CrudResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CrudResult> CartItemProxy.ICartItemApi.ClearCart(int User_Id)
        {
            var arguments = new object[] { User_Id };
            var func = requestBuilder.BuildRestResultFuncForMethod("ClearCart", new Type[] { typeof(int) });
            return (Task<CrudResult>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies.Common
{
    using global::Phoenix.Framework.Core;
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Shared.Common;
    using global::Phoenix.Shared.Core;
    using global::Phoenix.Shared.Customer;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedCustomerProxyICustomerApi : CustomerProxy.ICustomerApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedCustomerProxyICustomerApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<BaseResponse<CustomerDto>> CustomerProxy.ICustomerApi.GetCustomerApptById(CustomerRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCustomerApptById", new Type[] { typeof(CustomerRequest) });
            return (Task<BaseResponse<CustomerDto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CrudResult> CustomerProxy.ICustomerApi.UpdateCustomerDetail(int Id, CustomerRequest request)
        {
            var arguments = new object[] { Id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateCustomerDetail", new Type[] { typeof(int), typeof(CustomerRequest) });
            return (Task<CrudResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CustomerDto> CustomerProxy.ICustomerApi.AddCustomerDetail(CustomerRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("AddCustomerDetail", new Type[] { typeof(CustomerRequest) });
            return (Task<CustomerDto>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies
{
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Shared.Media;
    using global::Phoenix.Framework.Core;
    using global::Refit;
    using global::System;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedFileProxyIFileApi : FileProxy.IFileApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedFileProxyIFileApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<FileInfoDto> FileProxy.IFileApi.UploadImageMobile(FileUploadDto request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadImageMobile", new Type[] { typeof(FileUploadDto) });
            return (Task<FileInfoDto>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies.Common
{
    using global::Phoenix.Framework.Core;
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Shared.Common;
    using global::Phoenix.Shared.Product;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedProductMenuProxyIGetProductByIdApi : ProductMenuProxy.IGetProductByIdApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedProductMenuProxyIGetProductByIdApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<BaseResponse<ProductMenuDto>> ProductMenuProxy.IGetProductByIdApi.GetProductById(ProductMenuRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetProductById", new Type[] { typeof(ProductMenuRequest) });
            return (Task<BaseResponse<ProductMenuDto>>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies.Common
{
    using global::Phoenix.Framework.Core;
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Shared.Common;
    using global::Phoenix.Shared.ImageRecord;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedImageRecordProxyIImageRecordApi : ImageRecordProxy.IImageRecordApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedImageRecordProxyIImageRecordApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<BaseResponse<ImageRecordDto>> ImageRecordProxy.IImageRecordApi.GetAllImages(ImageRecordRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllImages", new Type[] { typeof(ImageRecordRequest) });
            return (Task<BaseResponse<ImageRecordDto>>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies.Common
{
    using global::Phoenix.Framework.Core;
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Shared.Common;
    using global::Phoenix.Shared.Core;
    using global::Phoenix.Shared.Order;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedOrderProxyIOrderApi : OrderProxy.IOrderApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedOrderProxyIOrderApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<BaseResponse<OrderAppDto>> OrderProxy.IOrderApi.GetAllAppOrders(OrderAppRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllAppOrders", new Type[] { typeof(OrderAppRequest) });
            return (Task<BaseResponse<OrderAppDto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<OrderAppDto> OrderProxy.IOrderApi.AddOrder(OrderAppRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("AddOrder", new Type[] { typeof(OrderAppRequest) });
            return (Task<OrderAppDto>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<BaseResponse<OrderAppDto>> OrderProxy.IOrderApi.GetLatestOrder(OrderAppRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetLatestOrder", new Type[] { typeof(OrderAppRequest) });
            return (Task<BaseResponse<OrderAppDto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CrudResult> OrderProxy.IOrderApi.EditOrder(int Id, OrderAppRequest request)
        {
            var arguments = new object[] { Id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("EditOrder", new Type[] { typeof(int), typeof(OrderAppRequest) });
            return (Task<CrudResult>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies.Common
{
    using global::Phoenix.Framework.Core;
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Shared.OrderDetail;
    using global::Phoenix.Shared.Order;
    using global::Phoenix.Mobile.Core.Models.OrderDetail;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Phoenix.Shared.Common;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedOrderDetailProxyIOrderDetailApi : OrderDetailProxy.IOrderDetailApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedOrderDetailProxyIOrderDetailApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<List<OrderDetailAppDto>> OrderDetailProxy.IOrderDetailApi.GetAllOrderDetails(OrderDetailAppRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllOrderDetails", new Type[] { typeof(OrderDetailAppRequest) });
            return (Task<List<OrderDetailAppDto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<OrderDetailAppDto> OrderDetailProxy.IOrderDetailApi.AddOrderDetail(OrderDetailAppRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("AddOrderDetail", new Type[] { typeof(OrderDetailAppRequest) });
            return (Task<OrderDetailAppDto>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<BaseResponse<OrderDetailHistoryDto>> OrderDetailProxy.IOrderDetailApi.GetOrderDetailHistory(OrderDetailHistoryRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetOrderDetailHistory", new Type[] { typeof(OrderDetailHistoryRequest) });
            return (Task<BaseResponse<OrderDetailHistoryDto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<BaseResponse<OrderDetailHistoryDto>> OrderDetailProxy.IOrderDetailApi.GetOrderDetailHistoryById(OrderDetailHistoryRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetOrderDetailHistoryById", new Type[] { typeof(OrderDetailHistoryRequest) });
            return (Task<BaseResponse<OrderDetailHistoryDto>>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies.Common
{
    using global::Phoenix.Framework.Core;
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Shared.Common;
    using global::Phoenix.Shared.Product;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedProductProxyIProductApi : ProductProxy.IProductApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedProductProxyIProductApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<BaseResponse<ProductDto>> ProductProxy.IProductApi.GetAllAppProducts(ProductRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllAppProducts", new Type[] { typeof(ProductRequest) });
            return (Task<BaseResponse<ProductDto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<BaseResponse<ProductMenuDto>> ProductProxy.IProductApi.GetProductMenus(ProductMenuRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetProductMenus", new Type[] { typeof(ProductMenuRequest) });
            return (Task<BaseResponse<ProductMenuDto>>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies.Common
{
    using global::Phoenix.Framework.Core;
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Shared.Common;
    using global::Phoenix.Shared.Product;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedProductMenuProxyIProductMenuApi : ProductMenuProxy.IProductMenuApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedProductMenuProxyIProductMenuApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<BaseResponse<ProductMenuDto>> ProductMenuProxy.IProductMenuApi.GetAllProductMenus(ProductMenuRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllProductMenus", new Type[] { typeof(ProductMenuRequest) });
            return (Task<BaseResponse<ProductMenuDto>>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies.Common
{
    using global::Phoenix.Framework.Core;
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Shared.Common;
    using global::Phoenix.Shared.Core;
    using global::Phoenix.Shared.ProductSKU;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedProductSKUProxyIProductSKUApi : ProductSKUProxy.IProductSKUApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedProductSKUProxyIProductSKUApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<BaseResponse<ProductSKUDto>> ProductSKUProxy.IProductSKUApi.GetAllProductSKUs(ProductSKURequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllProductSKUs", new Type[] { typeof(ProductSKURequest) });
            return (Task<BaseResponse<ProductSKUDto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<BaseResponse<ProductSKUAppDto>> ProductSKUProxy.IProductSKUApi.GetProductById(ProductSKURequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetProductById", new Type[] { typeof(ProductSKURequest) });
            return (Task<BaseResponse<ProductSKUAppDto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CrudResult> ProductSKUProxy.IProductSKUApi.UpdateProductSKUApp(int Id, ProductSKURequest request)
        {
            var arguments = new object[] { Id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateProductSKUApp", new Type[] { typeof(int), typeof(ProductSKURequest) });
            return (Task<CrudResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<BaseResponse<ProductImageDto>> ProductSKUProxy.IProductSKUApi.GetProductImages(ProductSKURequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetProductImages", new Type[] { typeof(ProductSKURequest) });
            return (Task<BaseResponse<ProductImageDto>>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies.Common
{
    using global::Phoenix.Framework.Core;
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Shared.Common;
    using global::Phoenix.Shared.ProductType;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedProductTypeProxyIProductTypeApi : ProductTypeProxy.IProductTypeApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedProductTypeProxyIProductTypeApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<BaseResponse<ProductTypeDto>> ProductTypeProxy.IProductTypeApi.GetAllProductTypes(ProductTypeRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllProductTypes", new Type[] { typeof(ProductTypeRequest) });
            return (Task<BaseResponse<ProductTypeDto>>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies.Common
{
    using global::Phoenix.Framework.Core;
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Mobile.Core.Models.Rating;
    using global::Phoenix.Mobile.Core.Services.Common;
    using global::Phoenix.Shared.Common;
    using global::Phoenix.Shared.Core;
    using global::Phoenix.Shared.Rating;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedRatingProxyIRatingApi : RatingProxy.IRatingApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedRatingProxyIRatingApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<BaseResponse<RatingAppDto>> RatingProxy.IRatingApi.GetRatingByProductSKUId(RatingAppRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRatingByProductSKUId", new Type[] { typeof(RatingAppRequest) });
            return (Task<BaseResponse<RatingAppDto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<RatingAppDto> RatingProxy.IRatingApi.AddRating(RatingAppRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("AddRating", new Type[] { typeof(RatingAppRequest) });
            return (Task<RatingAppDto>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CrudResult> RatingProxy.IRatingApi.UpdateRating(RatingAppRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateRating", new Type[] { typeof(RatingAppRequest) });
            return (Task<CrudResult>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies.Common
{
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Shared.Core;
    using global::Phoenix.Framework.Core;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Phoenix.Shared.User;
    using global::Phoenix.Shared.Common;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedUserProxyIUserApi : UserProxy.IUserApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedUserProxyIUserApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<CrudResult> UserProxy.IUserApi.ChangePassword(string phone, string oldPwd, string newPwd)
        {
            var arguments = new object[] { phone, oldPwd, newPwd };
            var func = requestBuilder.BuildRestResultFuncForMethod("ChangePassword", new Type[] { typeof(string), typeof(string), typeof(string) });
            return (Task<CrudResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CrudResult> UserProxy.IUserApi.ForgotPassword(string phone, string newPwd)
        {
            var arguments = new object[] { phone, newPwd };
            var func = requestBuilder.BuildRestResultFuncForMethod("ForgotPassword", new Type[] { typeof(string), typeof(string) });
            return (Task<CrudResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CrudResult> UserProxy.IUserApi.CreateUser(UserRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateUser", new Type[] { typeof(UserRequest) });
            return (Task<CrudResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<BaseResponse<UserDto>> UserProxy.IUserApi.GetLatestUser(UserRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetLatestUser", new Type[] { typeof(UserRequest) });
            return (Task<BaseResponse<UserDto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<BaseResponse<UserDto>> UserProxy.IUserApi.GetAllUsers(UserRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllUsers", new Type[] { typeof(UserRequest) });
            return (Task<BaseResponse<UserDto>>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies.Common
{
    using global::Phoenix.Framework.Core;
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Shared.Common;
    using global::Phoenix.Shared.Vendor;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedVendorProxyIVendorApi : VendorProxy.IVendorApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedVendorProxyIVendorApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<BaseResponse<VendorDto>> VendorProxy.IVendorApi.GetAllVendors(VendorRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAllVendors", new Type[] { typeof(VendorRequest) });
            return (Task<BaseResponse<VendorDto>>)func(Client, arguments);
        }
    }
}

namespace Phoenix.Mobile.Core.Proxies.Common
{
    using global::Phoenix.Framework.Core;
    using global::Phoenix.Mobile.Core.Framework;
    using global::Phoenix.Shared.Common;
    using global::Phoenix.Shared.Core;
    using global::Phoenix.Shared.Warehouse;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedWarehouseProxyIWarehouseApi : WarehouseProxy.IWarehouseApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedWarehouseProxyIWarehouseApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<BaseResponse<WarehouseDto>> WarehouseProxy.IWarehouseApi.GetWarehouseByProductSKUId(WarehouseRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetWarehouseByProductSKUId", new Type[] { typeof(WarehouseRequest) });
            return (Task<BaseResponse<WarehouseDto>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<CrudResult> WarehouseProxy.IWarehouseApi.UpdateWarehouseApp(int Id, WarehouseRequest request)
        {
            var arguments = new object[] { Id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("UpdateWarehouseApp", new Type[] { typeof(int), typeof(WarehouseRequest) });
            return (Task<CrudResult>)func(Client, arguments);
        }
    }
}

#pragma warning restore CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning restore CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
